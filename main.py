
import logging
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# üë§ –î–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—ñ–ª–∫–∏
ALLOWED_USERS = {
    "—á–∞—Ç": [123456789],       # üîÅ –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π user_id
    "—Ç–µ—Ö": [987654321],       # üîÅ –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π user_id
    "–Ω–æ–≤–∏–Ω–∏": []
}

# üßπ –ö–æ–Ω—Ñ—ñ–≥ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
AUTO_CLEAN_CONFIG = {
    "—á–∞—Ç": {"days": 1},
    "–Ω–æ–≤–∏–Ω–∏": {"weeks": 1}
}

# üîß –õ–æ–≥–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ‚úÖ –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≥—ñ–ª–∫–∞–º–∏ Telegram.")

# ‚ùì –î–æ–ø–æ–º–æ–≥–∞
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå –ö–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
        "/help ‚Äî –¥–æ–ø–æ–º–æ–≥–∞\n"
        "/–¥–æ–¥–∞–π_–≥—ñ–ª–∫—É [–Ω–∞–∑–≤–∞] ‚Äî –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –≥—ñ–ª–∫—É\n"
        "/–æ—á–∏—â–µ–Ω–Ω—è [–Ω–∞–∑–≤–∞] [–¥–Ω—ñ–≤|—Ç–∏–∂–Ω—ñ–≤] [–∫—ñ–ª—å–∫—ñ—Å—Ç—å] ‚Äî –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
    )

# ‚õî –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à—ñ—Ç—å /help –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö.")

# ‚ûï –î–æ–¥–∞—Ç–∏ –≥—ñ–ª–∫—É
async def –¥–æ–¥–∞–π_–≥—ñ–ª–∫—É(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚úèÔ∏è –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –≥—ñ–ª–∫–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /–¥–æ–¥–∞–π_–≥—ñ–ª–∫—É —á–∞—Ç")
        return

    branch = context.args[0].lower()
    if branch in ALLOWED_USERS:
        await update.message.reply_text(f"‚ö†Ô∏è –ì—ñ–ª–∫–∞ '{branch}' –≤–∂–µ —ñ—Å–Ω—É—î.")
    else:
        ALLOWED_USERS[branch] = [update.message.from_user.id]
        await update.message.reply_text(f"‚úÖ –ì—ñ–ª–∫–∞ '{branch}' –¥–æ–¥–∞–Ω–∞ –¥–ª—è {update.message.from_user.first_name}.")

# üßº –ê–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è
async def –æ—á–∏—â–µ–Ω–Ω—è(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        branch = context.args[0].lower()
        unit = context.args[1]
        amount = int(context.args[2])

        if unit not in ("–¥–Ω—ñ–≤", "—Ç–∏–∂–Ω—ñ–≤"):
            raise ValueError()

        config = {"days": amount} if unit == "–¥–Ω—ñ–≤" else {"weeks": amount}
        AUTO_CLEAN_CONFIG[branch] = config

        await update.message.reply_text(f"‚úÖ –û—á–∏—â–µ–Ω–Ω—è –¥–ª—è –≥—ñ–ª–∫–∏ '{branch}' –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {amount} {unit}.")

    except Exception:
        await update.message.reply_text("‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—Å: /–æ—á–∏—â–µ–Ω–Ω—è [–Ω–∞–∑–≤–∞] [–¥–Ω—ñ–≤|—Ç–∏–∂–Ω—ñ–≤] [–∫—ñ–ª—å–∫—ñ—Å—Ç—å]")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("–¥–æ–¥–∞–π_–≥—ñ–ª–∫—É", –¥–æ–¥–∞–π_–≥—ñ–ª–∫—É))
    app.add_handler(CommandHandler("–æ—á–∏—â–µ–Ω–Ω—è", –æ—á–∏—â–µ–Ω–Ω—è))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == '__main__':
    main()
