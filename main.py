import asyncio
import json
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters
)

SETTINGS_FILE = "settings.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
def load_settings():
    if os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"permissions": {}, "autodelete": {}}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
def save_settings(settings):
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(settings, f, ensure_ascii=False, indent=2)

settings = load_settings()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
async def is_admin(update: Update):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    member = await update.get_bot().get_chat_member(chat_id, user_id)
    return member.status in ["administrator", "creator"]

# –ö–æ–º–∞–Ω–¥–∞ /–¥–æ–∑–≤–æ–ª–∏—Ç–∏
async def –¥–æ–∑–≤–æ–ª–∏—Ç–∏(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update): return
    if len(context.args) != 3 or context.args[1] != "–≤":
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /–¥–æ–∑–≤–æ–ª–∏—Ç–∏ @user –≤ —á–∞—Ç")
        return
    user = context.args[0]
    topic = context.args[2].lower()
    settings["permissions"].setdefault(topic, [])
    if user not in settings["permissions"][topic]:
        settings["permissions"][topic].append(user)
        save_settings(settings)
    await update.message.reply_text(f"‚úÖ {user} –º–æ–∂–µ –ø–∏—Å–∞—Ç–∏ –≤ —Ç–µ–º—ñ {topic}")

# –ö–æ–º–∞–Ω–¥–∞ /–∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏
async def –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update): return
    if len(context.args) != 3 or context.args[1] != "–≤":
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /–∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ @user –≤ —á–∞—Ç")
        return
    user = context.args[0]
    topic = context.args[2].lower()
    if topic in settings["permissions"] and user in settings["permissions"][topic]:
        settings["permissions"][topic].remove(user)
        save_settings(settings)
    await update.message.reply_text(f"üö´ {user} –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–µ –ø–∏—Å–∞—Ç–∏ –≤ —Ç–µ–º—ñ {topic}")

# –ö–æ–º–∞–Ω–¥–∞ /–∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è
async def –∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update): return
    if len(context.args) != 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /–∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Ç 2–¥ –∞–±–æ /–∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Ç –≤–∏–∫–ª")
        return
    topic = context.args[0].lower()
    val = context.args[1]
    if val == "–≤–∏–∫–ª":
        settings["autodelete"].pop(topic, None)
        save_settings(settings)
        await update.message.reply_text(f"üõë –ê–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è —Ç–µ–º–∏ {topic} –≤–∏–º–∫–Ω–µ–Ω–æ")
    else:
        if val.endswith("–¥"):
            seconds = int(val[:-1]) * 86400
        elif val.endswith("—Ç"):
            seconds = int(val[:-1]) * 604800
        else:
            await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ (2–¥) –∞–±–æ —Ç–∏–∂–Ω—ñ–≤ (1—Ç)")
            return
        settings["autodelete"][topic] = seconds
        save_settings(settings)
        await update.message.reply_text(f"‚è± –ê–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤ —Ç–µ–º—ñ {topic} —á–µ—Ä–µ–∑ {val}")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    username = f"@{user.username}" if user.username else f"id:{user.id}"
    topic_id = str(message.message_thread_id) if message.message_thread_id else "default"

    # –ê–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è
    if topic_id in settings["autodelete"]:
        delay = settings["autodelete"][topic_id]
        await asyncio.sleep(delay)
        try: await message.delete()
        except: pass
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—É
    if topic_id in settings["permissions"]:
        if username not in settings["permissions"][topic_id]:
            try: await message.delete()
            except: pass

# –ó–∞–ø—É—Å–∫
async def main():
    from os import getenv
    token = getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("–¥–æ–∑–≤–æ–ª–∏—Ç–∏", –¥–æ–∑–≤–æ–ª–∏—Ç–∏))
    app.add_handler(CommandHandler("–∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏", –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏))
    app.add_handler(CommandHandler("–∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è", –∞–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è))
    app.add_handler(MessageHandler(filters.ALL, handle_message))
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
